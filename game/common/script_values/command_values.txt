# the weight of being picked when a new battle occurs on a Front
# root = commander
# is_advancing_side = whether this side is the one advancing or not (defending = no)
front_commander_pick_weight = {
	value = root.num_units

	if = {
		limit = {
			has_commander_order = defend
			commander_pm_usage = {
				target = root.owner
				production_method = pm_trench_infantry
				value >= 0.5
			}
		}
		add = 25
	}

	if = {
		limit = {
			has_trait = stalwart_defender 
			has_commander_order = defend
		}
		add = 5
	}

	else_if = {
		limit = {
			has_trait = trench_rat
			has_commander_order = defend
		}
		add = 10
	}

	else_if = {
		limit = {
			has_trait = defense_in_depth_specialist
			has_commander_order = defend
		}
		add = 15
	}

	if = {
		limit = {
			has_trait = basic_defensive_strategist
			has_commander_order = defend
		}
		multiply = 5
	}

	else_if = {
		limit = {
			has_trait = experienced_defensive_strategist
			has_commander_order = defend
		}
		multiply = 10
	}

	else_if = {
		limit = {
			has_trait = expert_defensive_strategist
			has_commander_order = defend
		}
		multiply = 15
	}

	if = {
		limit = {
			scope:is_advancing_side = yes
			commander_pm_usage = {
				target = root.owner
				production_method = pm_skirmish_infantry
				value >= 0.5
			}
		}
		add = 15
	}

	else_if = {
		limit = {
			scope:is_advancing_side = yes
			commander_pm_usage = {
				target = root.owner
				production_method = pm_squad_infantry
				value >= 0.5
			}
		}
		add = 20
	}

	else_if = {
		limit = {
			scope:is_advancing_side = yes
			commander_pm_usage = {
				target = root.owner
				production_method = pm_mechanized_infantry
				value >= 0.5
			}
		}
		add = 25
	}

	if = {
		limit = {
			scope:is_advancing_side = yes
			has_trait = basic_offensive_planner
		}
		multiply = 2
	}

	else_if = {
		limit = {
			scope:is_advancing_side = yes
			has_trait = experienced_offensive_planner
		}
		multiply = 3
	}

	else_if = {
		limit = {
			scope:is_advancing_side = yes
			has_trait = expert_offensive_planner
		}
		multiply = 4
	}

	if = {
		limit = {
			scope:is_advancing_side = no
			has_commander_order = defend
		}
		multiply = 4
	}
}

# the troop distribution weight of a Front for a country/commander
# root = country
# front = the front to calculate troop weight for
# character = the country commander (if any; could be garrison)
front_country_troop_weight = {
    value = "scope:front.num_enemy_units(root)"
}

# root = province
# front = the front this battle will happen on
# own_commander = the commander leading this side in battle (if any; could be garrison)
# enemy_commander = the commander leading this side in battle (if any; could be garrison)
# distance_to_strategic_objective = *squared* distance to this front active Strategic Objective, if any (use `exists` to check). Always > 0.0 when it exists.
# distance_to_closest_war_goal = *squared* distance to this front closest War Goal, if any (use `exists` to check). Always > 0.0 when it exists.
# if the console variable `debug_front_battle_province_weight` is enabled, data will be logged to `debug.log`
front_battle_province_weight = {
    value = 10
	
	add = {
		value = state.infrastructure
		divide = 2
		multiply = combat_width
	}
	
	# Increase weights for provinces in capital states
	if = {
		limit = {
			state = { is_capital = yes }
		}
		multiply = 10
	}	
	
	# Increase weight for provinces in states that contain wargoals, or are adjacent to states that contain wargoals. Does the same for provinces in Strategic Objectives.
	if = {
		limit = {
			exists = scope:own_commander
			state = {
			    OR = {
			        is_strategic_objective = scope:own_commander.owner
			        is_target_of_wargoal = scope:own_commander.owner
			    }
            }
		}
		multiply = 10
	}

	else_if = {
		limit = {
			exists = scope:own_commander
			state = {
			    any_neighbouring_state = {
			         OR = {
                        is_strategic_objective = scope:own_commander.owner
			            is_target_of_wargoal = scope:own_commander.owner
                    }
                }
            }
		}
		multiply = 6
	}

	else_if = {
		limit = {
			exists = scope:own_commander
			state = { 
				any_neighbouring_state = { 					
					any_neighbouring_state = { 
						OR = {
                            is_strategic_objective = scope:own_commander.owner
						    is_target_of_wargoal = scope:own_commander.owner
                        }
					}
				}
			}
		}
		multiply = 3
	}	
}

# the battalion size for each side in a land battle
# root = a country on the side being evaluated (this general's country, or this theater side owner if none)
# enemy_country = a country on the opposing side (the other general's country, or that theater side owner if none)
# front = the front to calculate troop weight for (if any; not during Naval Invasions)
# own_commander = the commander leading this side in battle (if any; could be garrison)
# enemy_commander = the commander leading this side in battle (if any; could be garrison)
# is_advancing_side = whether this side is the one advancing or not (defending = no)
# is_naval_invasion = if the battle is a naval landing battle
# province = the province where the battle is happening
land_battle_size = {
    # Start with a baseline number of battalions equal to the amount of allied troops on the front
    if = { # For all land battles
        limit = {
            exists = scope:front
        }

        value = "scope:front.num_total_battalions(root)"
    }
	else_if = { # For naval invasions
        limit = {
            exists = scope:own_commander
			scope:is_advancing_side = yes
        }

        value = "scope:own_commander.num_mobilized_battalions"	
	}
	else_if = { # For naval invasions
        limit = {
            exists = scope:province.land_hq
			scope:is_advancing_side = no
        }

        value = "scope:province.land_hq.num_garrison_units"	
	}		
	else_if = { # Fallback
        limit = {
            exists = scope:own_commander
        }

        value = "scope:own_commander.num_battalions"	
	}	
	
	# Cap to infrastructure-based combat width
	if = {
        limit = {
            exists = scope:province
        }

		max = {
			value = 5
			add = {
				value = scope:province.state.infrastructure
				divide = 2
			}
			multiply = scope:province.combat_width
			desc = "BATTLE_SIZE_COMBAT_WIDTH" # TODO PRCAL-24899
		}
	}

    # If we are defending and the enemy baseline force has higher combat stats where it matters, increase your force
	if = {
        limit = {
            exists = scope:own_commander
            exists = scope:front
            scope:is_advancing_side = no
            "scope:front.num_total_battalions(scope:enemy_country)" > 0
			"scope:front.num_total_battalions(scope:enemy_country)" < "scope:front.num_total_battalions(root)"
        }
        multiply = {
            fixed_range = {
                min = 1
                max = { 
                    add = "scope:front.num_total_battalions(root)"
                    divide = "scope:front.num_total_battalions(scope:enemy_country)"
					multiply = 0.3
					add = 1
					max = 3
                }
            }
            desc = "BATTLE_SIZE_ENEMY_SKILL_ADVANTAGE" # TODO PRCAL-24899
        }
    }

    # If we are advancing and the enemy baseline force has higher combat stats where it matters, increase your force (less than when defending)
	if = {
        limit = {
            exists = scope:own_commander
            exists = scope:front
            scope:is_advancing_side = yes
            "scope:front.num_total_battalions(scope:enemy_country)" > 0
            "scope:front.num_total_battalions(scope:enemy_country)" < "scope:front.num_total_battalions(root)"
        }
        multiply = {
            fixed_range = {
                min = 1
                max = {
                    add = "scope:front.num_total_battalions(root)"
                    divide = "scope:front.num_total_battalions(scope:enemy_country)"
					multiply = 0.3
					add = 1
					max = 3
                }
            }
            desc = "BATTLE_SIZE_ENEMY_SKILL_ADVANTAGE" # TODO PRCAL-24899
        }
    }
	
    # Cap to *actually available* troops; either the total number, or if own_commander is advancing, exclude defending commanders' troops
    if = {
        limit = {
            exists = scope:own_commander
            exists = scope:front
            scope:is_advancing_side = yes
        }
        max = {
            add = "scope:front.num_total_battalions(root)"
            subtract = "scope:front.num_defending_battalions(root)"
        	desc = "BATTLE_SIZE_MAX_AMOUNT_REACHED" # TODO PRCAL-24899
        }
    }
	else_if = {
        limit = {
            exists = scope:front
        }

        max = "scope:front.num_total_battalions(root)"
	}
	else_if = {
        limit = {
           exists = scope:own_commander
		    scope:is_advancing_side = yes
        }

        max = "scope:own_commander.num_mobilized_battalions"
	}
	else_if = { # For naval invasions
        limit = {
            exists = scope:province.land_hq
			scope:is_advancing_side = no
        }

        max = "scope:province.land_hq.num_garrison_units"	
	}		
	else_if = { # Fallback
        limit = {
           exists = scope:own_commander
        }

        max = "scope:own_commander.num_battalions"
	}		
	
    # Reduce final troops by up to half for attacker (random)
    if = {
        limit = {
            exists = scope:own_commander
			scope:is_advancing_side = yes
        }
        multiply = {
            fixed_range = {
                min = 0.5
                max = 1.0
            }
		    desc = "BATTLE_SIZE_LUCK" # TODO PRCAL-24899
        }
    }
	
    # Reduce final troops by up to half for defender (random)
	if = {
		limit = {
			exists = scope:own_commander
			scope:is_advancing_side = no
		}
		multiply = {
			fixed_range = {
				min = 0.5
				max = 1.0
			}
			desc = "BATTLE_SIZE_LUCK" # TODO PRCAL-24899
		}
    }
	
	# If own_commander is advancing, ensure at least 1 Battalion is doing so
    if = {
        limit = {
            exists = scope:own_commander
            scope:is_advancing_side = yes
        }
        min = 1
		desc = "BATTLE_SIZE_MIN_AMOUNT_REACHED"  # TODO PRCAL-24899
    }
}

# root = country
# own_commander = the commander leading this side in battle (if any; could be garrison)
# province = land province this battle takes place in
land_battle_unit_selection_weight = {
	value = manpower
	multiply = morale
	
	# Generals have a stronger tendency to bring their own Battalions than borrowed ones
	if = {
		limit = {
			exists = scope:own_commander
			exists = commander
			commander = scope:own_commander
		}
		multiply = 2
	}

	if = {
		limit = {
			exists = scope:own_commander
		}
		multiply = mobilization
	}

	if = {
		limit = {
			scope:is_advancing_side = yes
		}
		multiply = offense
	}

	else_if = {
		limit = {
			scope:is_advancing_side = no
		}
		multiply = defense
	}
}

# the flotilla size for each side in a naval battle
# root = country
# enemy_country = the other country
# own_commander = the commander leading this side in battle (if any; could be garrison)
# enemy_commander = the commander leading this side in battle (if any; could be garrison)
naval_battle_size = {
	if = {
		limit = {
			exists = scope:own_commander
		}
		value = scope:own_commander.num_units
	}
}

# root = country
# own_commander = the commander leading this side in battle
# province = naval province this battle takes place in
naval_battle_unit_selection_weight = {
	value = 1

	if = {
		limit = {
			commander_pm_usage = {
				target = root.owner
				production_method = pm_ironclads
			}
		}
		multiply = 3
	}

	if = {
		limit = {
			commander_pm_usage = {
				target = root.owner
				production_method = pm_monitors
			}
		}
		multiply = 5
	}

	if = {
		limit = {
			commander_pm_usage = {
				target = root.owner
				production_method = pm_dreadnoughts
			}
		}
		multiply = 10
	}

	if = {
		limit = {
			commander_pm_usage = {
				target = root.owner
				production_method = pm_battleships
			}
		}
		multiply = 15
	}
}

# the weight for how likely a unit is to take casualties over others
# root = combat unit
battle_unit_casualty_weight = {
	value = 1
	divide = {
		value = morale
		min = 0.01
	}
}
