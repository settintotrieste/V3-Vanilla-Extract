# COPY-PASTED FOR NOW
@panel_width_minus_10 = 530			# used to be 450
@panel_width = 540  				# used to be 460
@panel_width_half = 270				# used to be 230
@panel_width_plus_10 = 550  		# used to be 470
@panel_width_plus_14 = 554			# used to be 474
@panel_width_plus_14_half = 277		# used to be 237
@panel_width_plus_20 = 560			# used to be 480
@panel_width_plus_30 = 570			# used to be 490
@panel_width_plus_70 = 610			# used to be 530

types construction_queue {
	type construction_queue = flowcontainer {
		using = default_list_position
		direction = vertical
		minimumsize = { @panel_width -1 }

		default_header_2texts = {
			blockoverride "text1" {
				block "text" {
					text = "CONSTRUCTION_QUEUE"
				}
			}
			blockoverride "text2" {
				block "text" {
					visible = "[And(Country.HasConstructionQueued, Not(Country.IsConstructionPaused))]"
					text = "TOTAL_TIME_CONSTRUCTION"
					tooltip = "TOTAL_TIME_CONSTRUCTION_TOOLTIP"
				}
			}
		}		

		textbox = {
			text = "NEXT_PRIVATE_CONSTRUCTION"
			visible = "[GetPlayer.ShowInvestmentPoolPredictedNextBuilding]"
			parentanchor = hcenter
			background = {
				using = dark_area
			}	
			minimumsize = { @panel_width_plus_14 -1 }
			margin_top = 10
			margin_bottom = 10
			autoresize = yes
			align = center|nobaseline
		}

		widget = {
			parentanchor = hcenter
			visible = "[ProductionMethodsPanel.CanHavePrivateConstructions]"
			size = { @panel_width 50 }	

			button = {
				using = default_button
				parentanchor = vcenter
				position = { 0 0 }
				size = { 300 40 }
				text = "SHOW_PRIVATE_CONSTRUCTIONS"
				visible = "[Not(ProductionMethodsPanel.IsShowingPrivateConstructions)]"
				onclick = "[ProductionMethodsPanel.ShowPrivateConstructions]"
			}	

			button = {
				using = default_button
				parentanchor = vcenter
				position = { 0 0 }
				size = { 300 40 }
				text = "SHOW_GOVERNMENT_CONSTRUCTIONS"
				visible = "[Not(ProductionMethodsPanel.IsShowingGovernmentConstructions)]"
				onclick = "[ProductionMethodsPanel.ShowGovernmentConstructions]"
			}


			button = {
				using = default_button
				parentanchor = vcenter|right
				position = { 0 0 }
				size = { 160 40 }
				text = "CONSTRUCTION_BUTTON_PAUSE"
				tooltip = "[Country.PauseConstructionTooltip]"
				onclick = "[Execute( Country.PauseConstruction )]"
				enabled = "[And(IsValid( Country.PauseConstruction ), Country.HasConstructionQueued)]"
				visible = "[Not(Country.IsConstructionPaused)]"
			}

			button = {
				using = default_button
				parentanchor = vcenter|right
				position = { 0 0 }
				size = { 160 40 }
				text = "CONSTRUCTION_BUTTON_RESUME"
				tooltip = "[Country.ResumeConstructionTooltip]"
				onclick = "[Execute( Country.ResumeConstruction )]"
				enabled = "[IsValid( Country.ResumeConstruction )]"
				visible = "[Country.IsConstructionPaused]"
			}					
		}			
		
		flowcontainer = {
			datamodel = "[Country.AccessPagedPrivateConstructionQueue(ProductionMethodsPanel.AccessCurrentPrivateConstructionQueuePage(GetMetaPlayer.GetPlayedOrObservedCountry))]"
			visible = "[And(ProductionMethodsPanel.IsShowingPrivateConstructions, Not(IsDataModelEmpty(Country.AccessPagedPrivateConstructionQueue(ProductionMethodsPanel.AccessCurrentPrivateConstructionQueuePage(GetMetaPlayer.GetPlayedOrObservedCountry)))))]"
			direction = vertical
			parentanchor = hcenter

			item = {
				construction_queue_item = {}
			}
		}				

		flowcontainer = {
			datamodel = "[Country.AccessPagedGovernmentConstructionQueue(ProductionMethodsPanel.AccessCurrentGovernmentConstructionQueuePage(GetMetaPlayer.GetPlayedOrObservedCountry))]"
			visible = "[And(ProductionMethodsPanel.IsShowingGovernmentConstructions, Not(IsDataModelEmpty(Country.AccessPagedGovernmentConstructionQueue(ProductionMethodsPanel.AccessCurrentGovernmentConstructionQueuePage(GetMetaPlayer.GetPlayedOrObservedCountry)))))]"
			direction = vertical
			parentanchor = hcenter

			item = {
				construction_queue_item = {}
			}
		}		

		empty_state = {
			blockoverride "visible" {
				visible = "[Not(Country.HasConstructionQueued)]"
			}
			blockoverride "text" {
				text = "CONSTRUCTION_QUEUE_IS_EMPTY"
			}
		}
	}

	type construction_queue_item = container {
		using = unclickable_listentry
		
		flowcontainer = {
			datacontext = "[ConstructionQueueElement.GetBuilding]"
			spacing = 7
			margin_bottom = 5

			alwaystransparent = no
			onmousehierarchyenter = "[AccessHighlightManager.HighlightState(ConstructionQueueElement.GetState)]"
			onmousehierarchyleave = "[AccessHighlightManager.RemoveHighlight]"
			
			button = {
				onclick = "[InformationPanelBar.OpenBuildingDetailsPanel(ConstructionQueueElement.AccessBuilding)]"
				onrightclick = "[RightClickMenuManager.ShowForBuilding(ConstructionQueueElement.AccessBuilding)]"
				parentanchor = vcenter
				tooltip = "GO_TO_BUTTON_BUILDING"
				size = { 35 35 }
				texture = "[ConstructionQueueElement.GetBuilding.GetTexture]"
			}
			
			### NAME + PROGRESS
			widget = {
				size = { 380 25 }
				parentanchor = vcenter

				background = {
					visible = "[GreaterThan_CFixedPoint(ConstructionQueueElement.GetConstructionSpeed, '(CFixedPoint)0')]"
					using = paper_bg
				}
				
				default_progressbar_horizontal = {
					datacontext = "[ConstructionQueueElement.GetBuilding]"
					
					blockoverride "values" {
						value = "[ConstructionQueueElement.CalcPercentComplete]"
						min = 0 
						max = 1 
					}
					tooltip = "[ConstructionQueueElement.GetTooltip]"
					size = { 100% 100% }

					textbox = {
						visible = "[GreaterThan_CFixedPoint(ConstructionQueueElement.GetConstructionSpeed, '(CFixedPoint)0')]"
						parentanchor = left|vcenter
						align = right|nobaseline
						position = { 310 0 }
						text = "CONSTRUCTION_QUEUE_ELEMENT_ALLOCATION"
					}

					textbox = {
						visible = "[Not(GreaterThan_CFixedPoint(ConstructionQueueElement.GetConstructionSpeed, '(CFixedPoint)0'))]"
						parentanchor = left|vcenter
						align = right|nobaseline
						position = { 255 0 }
						max_width = 70
						autoresize = yes
						elide = right
						fontsize_min = 12
						text = "QUEUED"
						alpha = "[TransparentIfFalse(GreaterThan_CFixedPoint(ConstructionQueueElement.GetConstructionSpeed, '(CFixedPoint)0'))]"
					}

					textbox = {
						position = { -7 0 }
						text = "#v [ConstructionQueueElement.GetWeeksLeft]#!w"
						parentanchor = right|vcenter
						autoresize = yes
						align = right|nobaseline
						alpha = "[TransparentIfFalse(GreaterThan_CFixedPoint(ConstructionQueueElement.GetConstructionSpeed, '(CFixedPoint)0'))]"
					}
				}
				
				flowcontainer = {
					position = { 7 0 }
					parentanchor = vcenter
					spacing = 8
					
					textbox = {
						autoresize = yes
						align = left|nobaseline
						parentanchor = vcenter
						max_width = 200
						elide = right
						fontsize_min = 14
						text = "CONSTRUCTION_QUEUE_BUILDING_IN_STATE"
					}

					button_icon_goto = {
						parentanchor = vcenter
						size = { 25 25 }
						onclick = "[InformationPanelBar.OpenBuildingDetailsPanel(ConstructionQueueElement.AccessBuilding)]"
						tooltip = "GO_TO_BUTTON_BUILDING"
						block "goto_visibility" {}
					}
				}

				textbox = {
					position = { -7 2 }
					autoresize = yes
					align = right|nobaseline
					parentanchor = vcenter|right
					visible = "[Not(ConstructionQueueElement.IsValidConstruction)]"
					text = "@red_cross!"
					tooltip = "[ConstructionQueueElement.GetInvalidTooltip]"
				}
			}
			
			widget = { size = { 0 0 }}
			
			### BUTTONS
			button_icon_round_action = {
				size = { 30 30 }
				blockoverride "icon" {
					texture = "gfx/interface/icons/generic_icons/up_up.dds"
				}
				blockoverride "icon_size" {
					size = { 75% 75% }
				}
				parentanchor = vcenter
				tooltip = "MOVE_UP"
				enabled = "[IsValid( ConstructionQueueElement.MoveUp )]" # Assumption is that it needs to be able to be moved up in order to be moved to the top also

				click_modifiers = {
					ondefault = "[Execute( ConstructionQueueElement.MoveUp )]"
					onalt = "[Execute( ConstructionQueueElement.MoveToTop )]"
				}
			}

			button_icon_round_action = {
				size = { 30 30 }
				blockoverride "icon" {
					texture = "gfx/interface/icons/generic_icons/down_down.dds"
				}
				blockoverride "icon_size" {
					size = { 75% 75% }
				}
				parentanchor = vcenter
				tooltip = "MOVE_DOWN"
				enabled = "[IsValid( ConstructionQueueElement.MoveDown )]" # Assumption is that it needs to be able to be moved down in order to be moved to the bottom also

				click_modifiers = {
					ondefault = "[Execute( ConstructionQueueElement.MoveDown )]"
					onalt = "[Execute( ConstructionQueueElement.MoveToBottom )]"
				}
			}

			button_icon_cancel = {
				size = { 30 30 }
				parentanchor = vcenter
				tooltip = "CANCEL_CONSTRUCTION"
				enabled = "[IsValid( ConstructionQueueElement.CancelConstruction )]"
				onclick = "[Execute( ConstructionQueueElement.CancelConstruction )]"
			}							
		}	
	}
}

