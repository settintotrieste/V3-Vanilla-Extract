# COPY-PASTED FOR NOW
@panel_width_minus_10 = 530			# used to be 450
@panel_width = 540  				# used to be 460
@panel_width_half = 270				# used to be 230
@panel_width_plus_10 = 550  		# used to be 470
@panel_width_plus_14 = 554			# used to be 474
@panel_width_plus_14_half = 277		# used to be 237
@panel_width_plus_20 = 560			# used to be 480
@panel_width_plus_30 = 570			# used to be 490
@panel_width_plus_70 = 610			# used to be 530



types political_movement_panel_types
{
	type political_movement_panel = default_block_window_two_lines {
		name = "political_movement_panel"
		enabled = yes

		datacontext = "[PoliticalMovementPanel.GetPoliticalMovement]"

		blockoverride "window_header_name"
		{
			text = "[PoliticalMovement.GetName]"
		}

		blockoverride "window_header_name_line_two"
		{
			text = "POLITICAL_MOVEMENT_IN_COUNTRY"
		}

		blockoverride "goto_button" {
			button_icon_goto = {
				size = { 30 30 }
				datacontext = "[PoliticalMovement.GetCountry]"
				tooltip = "GO_TO_BUTTON_COUNTRY"
				onclick = "[InformationPanelBar.OpenCountryPanel(PoliticalMovement.GetCountry.Self)]"
			}
		}

		blockoverride "fixed_top"
		{
			# Non-Revolutionary Political Movement Header
			political_movement_top_illu = {
				visible = "[Not(PoliticalMovement.IsRevolutionary)]"
				blockoverride "illu" {
					texture = "gfx/interface/illustrations/top_illus/top_illu_political_movement.dds"
				}
			}

			# Revolutionary Political Movement Header
			revolutionary_political_movement_top_illu = {
				visible = "[PoliticalMovement.IsRevolutionary]"
				blockoverride "illu" {
					texture = "gfx/interface/illustrations/top_illus/top_illu_revolutionary_movement.dds"
				}
			}

			### TABS
			tab_buttons = {
				# Poltical Movement overview
				blockoverride "first_button" {
					text = "OVERVIEW"
				}
				blockoverride "first_button_click" {
					onclick = "[InformationPanel.SelectTab('default')]"
				}
				blockoverride "first_button_visibility" {
					visible = "[InformationPanel.IsTabSelected('default')]"
				}
				blockoverride "first_button_visibility_checked" {
					visible = "[Not( InformationPanel.IsTabSelected('default') )]"
				}
				blockoverride "first_button_selected" {
					text = "OVERVIEW"
				}	

				# Population
				blockoverride "second_button" {
					text = "SUPPORTING_POPULATION"
				}
				blockoverride "second_button_click" {
					onclick = "[InformationPanel.SelectTab('supporting_population')]"
				}
				blockoverride "second_button_visibility" {
					visible = "[InformationPanel.IsTabSelected('supporting_population')]"
				}
				blockoverride "second_button_visibility_checked" {
					visible = "[Not( InformationPanel.IsTabSelected('supporting_population') )]"
				}
				blockoverride "second_button_selected" {
					text = "SUPPORTING_POPULATION"
				}
			}
		}
	
		blockoverride "scrollarea_content_vbox"
		{
			vbox = {
				name = "content_container"
				layoutpolicy_horizontal = preferred

				### Overview
				vbox = {
					layoutpolicy_horizontal = preferred
					visible = "[InformationPanel.IsTabSelected('default')]"
					using = default_content_fade
					margin_top = 8

					vbox = {
						layoutpolicy_horizontal = preferred
						layoutpolicy_vertical = expanding
						spacing = 8

						### Interest Groups
						default_header = {
							blockoverride "text"
							{
								text = "SUPPORTING_INTEREST_GROUPS"
							}
						}

						widget = {
							size = { 540 100 }

							background = {
								using = entry_bg_simple
							}

							flowcontainer = {
								spacing = 5
								parentanchor = vcenter
								margin_left = 5

								icon = {
									parentanchor = vcenter
									texture = "gfx/interface/icons/generic_icons/population.dds"
									size = { 65 65 }
									tooltip = "POLITICAL_MOVEMENT_POP_SUPPORT_TOOLTIP"
								}

								flowcontainer = {
									parentanchor = vcenter
									direction = vertical

									textbox = {
										text = "TOTAL_INDIVIDUALS_SUPPORT"
										align = left|nobaseline
										autoresize = yes
										max_width = 450
										elide = right
										fontsize_min = 14
									}

									textbox = {
										raw_text = "#v [PoliticalMovement.GetNumSupportingPops|Dv]#!"
										autoresize = yes
										align = left|nobaseline
										using = fontsize_large
										tooltip = "POLITICAL_MOVEMENT_POP_SUPPORT_TOOLTIP"
									}
								}
							}
						}

						vbox = {
							layoutpolicy_horizontal = expanding
							layoutpolicy_vertical = expanding
							datamodel = "[PoliticalMovement.GetSupportingInterestGroups]"
							spacing = 10

							item = {
								interest_group_in_movement_info = {}
							}

							empty_state_dynamic_width = {
								margin = { 0 20 }
								visible = "[IsDataModelEmpty(PoliticalMovement.GetSupportingInterestGroups)]"
								text = "POLITICAL_MOVEMENT_NO_SUPPORTING_INTEREST_GROUPS"
								autoresize = yes
							}
						}

						expand = {}
					}

					vbox = {
						layoutpolicy_horizontal = preferred
						layoutpolicy_vertical = expanding
						spacing = 10

						### Agitators
						default_header = {
							blockoverride "text"
							{
								text = "SUPPORTING_AGITATORS"
							}
						}

						dynamicgridbox = {
							layoutpolicy_vertical = preferred
							flipdirection = yes
							datamodel_wrap = 4

							datamodel = "[PoliticalMovement.GetSupportingCharacters]"

							item = {
								agitator_in_movement_panel = {
									visible = "[Not(IsDataModelEmpty(PoliticalMovement.GetSupportingCharacters))]"
								}
							}
						}

						no_agitator_in_movement_panel = {
							visible = "[IsDataModelEmpty(PoliticalMovement.GetSupportingCharacters)]"
						}
					}

				}

				### Population
				vbox = {
					layoutpolicy_horizontal = preferred
					visible = "[InformationPanel.IsTabSelected('supporting_population')]"
					using = default_content_fade
					datacontext = "[GetPlayer]"

					pop_list_gridbox = {
						blockoverride "pop_list_context" {
							datacontext = "[PoliticalMovement.GetSupportingPops]"
						}

						### UX-make a Political movement tooltip variation
						#blockoverride "tooltipwidget" {		
						#	tooltipwidget = {
						#		FancyTooltip_PopTypeState = {}
						#	}
						#}
					}	
				}

				expand = {}	
			}
		}
	}

	### AGITATORS IN MOVEMENT INFO
	type agitator_in_movement_panel = widget {
		size = { 120 215 }

		widget = {
			size = { 105 140 }
			parentanchor = bottom|hcenter

			background = {
				using = entry_bg_simple
			}
		}

		character_portrait_large = {
			parentanchor = hcenter|top
			blockoverride "show_hat" {}
			blockoverride "highlight" {}
			
			### IG ICON
			character_ig_button = {
				parentanchor = bottom|left
				size = { 38 38 }
				position = { 2 0 }
				blockoverride "in_government_icon" {}
			}
			
			### IDEOLOGY
			icon = {
				parentanchor = bottom|right
				size = { 38 38 }
				position = { -2 0 }
				datacontext = "[Character.GetIdeology]"
				texture = "[Ideology.GetTexture]"
				tooltipwidget = {
					FancyTooltip_Ideology = {}
				}
			}
		}

		widget = {
			size = { 100 150 }
			parentanchor = bottom|hcenter

			flowcontainer = {
				direction = vertical
				position = { 0 50 }
				spacing = 3
				
				textbox = {
					text = "POLITICAL_MOVEMENT_SUPPORT_SHORT"
					size = { 90 20 }
					margin_left = 5
					autoresize = yes
					using = fontsize_small
					parentanchor = top|left
					align = nobaseline|left
				}

				textbox = {
					tooltip = "POLITICAL_MOVEMENT_AGITATOR_SUPPORT_TOOLTIP"
					text = "POLITICAL_MOVEMENT_AGITATOR_SUPPORT"
					size = { 90 20 }
					max_width = 100
					margin_left = 5
					autoresize = yes
					elide = right
					fontsize_min = 14
					parentanchor = top|left
					align = nobaseline|left
				}

				divider_clean = {
					blockoverride "size" {
						size =  { 100 2 }
					}
				}

				textbox = {
					text = "POPULARITY"
					size = { 90 20 }
					margin_left = 5
					margin_top = 2
					autoresize = yes
					using = fontsize_small
					parentanchor = top|left
					align = nobaseline|left
				}

				textbox = {
					tooltip = "POPULARITY_BREAKDOWN"
					text = "CHARACTER_POPULARITY"
					size = { 90 20 }
					max_width = 100
					margin_left = 5
					margin_top = 2
					autoresize = yes
					fontsize_min = 14
					elide = right
					parentanchor = top|left
					align = nobaseline|left
				}
			}
		}
	}

	### NO AGITATORS IN MOVEMENT
	type no_agitator_in_movement_panel = widget {
		size = { 480 50 }

		textbox = {
			text = "NO_AGITATOR_IN_MOVEMENT"
			using = empty_state_text_properties
			using = fontsize_xxl
			align = nobaseline|center
			parentanchor = center
		}
	}

	### INTEREST GROUP IN MOVEMENT INFO
	type interest_group_in_movement_info = widget {
		size = { 540 100 }

		background = {
			texture = "gfx/interface/tooltip/tooltip_title_bg.dds"
			color = "[InterestGroup.GetColor]"
			alpha = 0.3

			modify_texture = {
				using = texture_velvet
			}
		}

		hbox = {
			layoutpolicy_horizontal = expanding
			layoutpolicy_vertical = expanding
			max_width = 520
			margin_left = 10

			### IG BUTTON
			ig_button = {
				block "ig_button_size" {
					size = { 60 60 }
				}
				using = tooltip_ws
			}

			vbox = {
				layoutpolicy_horizontal = expanding
				layoutpolicy_vertical = preferred

				expand = {}

				hbox = {
					layoutpolicy_horizontal = preferred
					
					### NAME
					textbox = {
						size = { 0 30 }
						margin_left = 10
						text = "INTEREST_GROUP_NAME_WITH_CLOUT"
						align = left|nobaseline
						autoresize = yes
						#using = fontsize_large
						block "highlight_name" {}
						elide = right
					}

					expand = {}
				}

				hbox = {
					layoutpolicy_horizontal = preferred

					### IG APPROVAL
					textbox = {
						autoresize = yes
						align = left|nobaseline
						margin_left = 10
						size = { 0 25 }
						elide = right
						raw_text = "[InterestGroup.GetApprovalRating] #bold ([InterestGroup.GetApprovalValue|=+])#!"
						tooltip = "IG_APPROVAL_BREAKDOWN"
					}

					expand = {}
				}

				expand = {}
			}

			### LEADER
			widget = {
				size = { 90 90 }
				datacontext = "[InterestGroup.AccessLeader]"
				datacontext = "[Character.GetIdeology]"
				visible = "[Ideology.HasStanceOnMovement(PoliticalMovement.Self)]"

				character_portrait_medium = {
					using = tooltip_above
					blockoverride "show_hat" {}
					parentanchor = vcenter
					blockoverride "highlight" {}
				}

				widget = {
					size = { 35 35 }
					parentanchor = bottom|right

					icon = {
						size = { 150% 150% }
						using = rotate_glow_animation
						parentanchor = center
					}

					icon = {
						texture = "[Ideology.GetTexture]"
						tooltipwidget = {
							FancyTooltip_Ideology = {}
						}
						size = { 100% 100% }
						parentanchor = center
					}
				}
			}
		}
	}

	### POLITICAL MOVEMENT TOP
	type political_movement_top_illu = top_illu {

		### Law Button and Info
		flowcontainer = {
			parentanchor = center
			direction = horizontal
			spacing = 10

			### Law icon
			button_icon_round_big = {
				size = { 70 70 }
				datacontext = "[PoliticalMovement.GetLaw]"
				
				blockoverride "icon" {
					texture = "[Law.GetTexture]"
				}

				blockoverride "icon_size" {
					size = { 65% 65% }
				}

				onclick = "[InformationPanelBar.OpenChangeLaw(Law.AccessSelf)]"
				tooltip = "[Law.GetTooltip]"
			}

			flowcontainer = {
				parentanchor = left|vcenter
				direction = vertical
				spacing = 10

				textbox = {
					layoutpolicy_horizontal = expanding
					autoresize = yes
					align = left|nobaseline
					elide = right
					fontsize_min = 16
					text = "POLITICAL_MOVEMENT_SUPPORT_WITH_LABEL"
				}

				textbox = {
					layoutpolicy_horizontal = expanding
					visible = "[Not(PoliticalMovement.IsPlacated)]"
					autoresize = yes
					align = left|nobaseline
					elide = right
					fontsize_min = 16
					text = "POLITICAL_MOVEMENT_RADICALISM_WITH_LABEL"
				}

				textbox = {
					layoutpolicy_horizontal = expanding
					autoresize = yes
					align = left|nobaseline
					elide = right
					fontsize_min = 16
					
					visible = "[PoliticalMovement.IsPlacated]"
					text = "[concept_political_movement_placated]"
				}
			}
		}	
	}

	### REVOLUTIONARY POLITICAL MOVEMENT TOP
	type revolutionary_political_movement_top_illu = top_illu {

		### Revolution Clock and Law button
		widget = {
			parentanchor = center
			size = { 100% 100 }

			###REVOLUTION ANIMATION###
			state = {
				#name = _show
				name = testing
				trigger_on_create = yes
				alpha = 1
				delay = 0.2
				duration = 0.7
				on_start = "[PdxGuiWidget.FindChild('revolution_header').TriggerAnimation('show')]"
				on_start = "[PdxGuiWidget.FindChild('revolution_clock').TriggerAnimation('show')]"
			}

			state = {
				#name = _hide
				name = testing2
				#trigger_on_create = yes
				#on_start = "[PdxGuiWidget.FindChild('revolution_clock').TriggerAnimation('hide')]"
				alpha = 0
				duration = 1
			}

			hbox = {
				layoutpolicy_horizontal = expanding
				name = revolution_header
				margin_left = 15
				spacing = 10
				alpha = 0

				state = {
					name = show
					alpha = 1
					delay = 0.45
					duration = 0.1
					using = Animation_Curve_Default
				}

				widget = {
					size = { 100 100 }
					tooltip = "POLITICAL_MOVEMENT_REVOLUTION_CLOCK_CHECKPOINT_TOOLTIP"
					using = tooltip_se

					widget = {
						name = revolution_clock
						size = { 0 0 }
						parentanchor = center

						###REVOLUTION CLOCK ANIMATION###
						state = {
							name = show
							next = 2
							delay = 0.35
							size = { 180 180 }
							duration = 0.1
							using = Animation_Curve_Default
						}

						state = {
							name = 2
							size = { 100 100 }
							delay = 0.05
							duration = 0.1
							using = Animation_Curve_EaseOut
						}

						icon = {
							using = rotate_glow_animation_02
							blockoverride "rotate_animation_texture" {
								texture = "gfx/interface/animation/color_bad.dds"
							}
							size = { 250% 250% }
							parentanchor = center
						}

						round_progress_bad = {
							size = { 80% 80% }
							position = { 0 7 }

							value = "[FixedPointToFloat(PoliticalMovement.GetRevolution.GetClockTime)]"
							parentanchor = center
						}
						
						icon = {
							size = { 100% 100% }
							texture = "gfx/interface/backgrounds/revolution_clock_frame.dds"
							### Law icon
							button_icon_round_big = {
								size = { 60 60 }
								position = { 0 7 }
								parentanchor = center
								
								blockoverride "icon" {
									texture = "[PoliticalMovement.GetLaw.GetTexture]"
								}

								blockoverride "icon_size" {
									size = { 65% 65% }
								}

								onclick = "[InformationPanelBar.OpenChangeLaw(PoliticalMovement.GetLaw.AccessSelf)]"
							}
						}
					}
				}

				vbox = {
					layoutpolicy_horizontal = expanding
					spacing = 5

					### REVOLUTION PROGRESSBAR ###
					widget = {
						size = { 450 30 }
						
						bad_progressbar_horizontal = {
							datacontext = "[PoliticalMovement.GetRevolution]"

							size = { 400 30 }
							tooltip = "REVOLUTIONS_PROGRESS_TOOLTIP"

							blockoverride "values" {
								value = "[FixedPointToFloat( PoliticalMovement.GetRevolution.GetProgress )]"
								min = 0
								max = 1
							}

							flowcontainer = {
								parentanchor = vcenter
								margin_left = 10
								spacing = 7

								### revolution header
								textbox = {
									text = "REVOLUTIONS_HEADER"
									tooltip = "REVOLUTIONS_HEADER_TOOLTIP"
									align = nobaseline
									autoresize = yes
								}
							}

							textbox = {
								text = "[PoliticalMovement.GetRevolution.GetProgress|%0v]"
								autoresize = yes
								align = nobaseline
								parentanchor = right|vcenter
								margin_right = 35
							}
							
							blockoverride "in_government_icon"{}

							icon = {
								parentanchor = right|vcenter
								size = { 25 25 }
								texture = "gfx/interface/icons/politics_icons/radicalized.dds"
								position = { -5 0 }
							}
						}

					}

					hbox = {
						layoutpolicy_horizontal = expanding
						textbox = {
							layoutpolicy_horizontal = expanding
							autoresize = yes
							align = left|nobaseline
							elide = right
							fontsize_min = 16
							text = "POLITICAL_MOVEMENT_SUPPORT_WITH_LABEL"
						}

						textbox = {
							layoutpolicy_horizontal = expanding
							visible = "[Not(PoliticalMovement.IsPlacated)]"
							autoresize = yes
							align = left|nobaseline
							elide = right
							fontsize_min = 16
							text = "POLITICAL_MOVEMENT_RADICALISM_WITH_LABEL"
						}

						textbox = {
							layoutpolicy_horizontal = expanding
							autoresize = yes
							align = left|nobaseline
							elide = right
							fontsize_min = 16
							
							visible = "[PoliticalMovement.IsPlacated]"
							text = "[concept_political_movement_placated]"
						}
					}
				}
			}
		}

		vfx = {
			size = { 100% 220% }

			blockoverride "entity_instance" {
				entity_instance = vfx_ui_plane_war_panel_fire_plane_entity
			}
			
			alpha = 0.2
		}
	}

	### POP LIST FOR POLITICAL MOVEMENT
	type pop_list_gridbox = dynamicgridbox {
		block "pop_list_context" {}
		datamodel = "[PopList.AccessPopList]"

		item = {
			flowcontainer = {
				direction = vertical
				margin = { 0 3 }

				flowcontainer = {
					direction = vertical
					spacing = 0

					background = {
						using = entry_bg
					}

					### EXPANDABLE ENTRY
					widget = {
						size = { 550 110 }
						datacontext = "[PopListItem.GetPopType]"

						flowcontainer = {
							datacontext = "[PopListItem.GetFirstPop]"
							margin_left = 5
							parentanchor = vcenter
							
							pop_portrait_simple = {

								blockoverride "portrait_button" {}
								
								size = { 100 100 }
								
								background = {
									using = pop_bg
								}
								
								blockoverride "portrait_size" {
									size = { 125 125 }
								}
							}
						}

						### DROPDOWN / EXPAND
						section_header_button = {
							parentanchor = right
							position = { 0 2 }
							size = { 440 38 }
							
							blockoverride "left_text" {
								raw_text = "#bold [PopListItem.GetPopType.GetNameNoIcon]#!"
							}
							
							blockoverride "onclick" {
								onclick = "[PopListItem.ToggleExpand]"
							}
							
							blockoverride "onclick_showmore" {
								visible = "[Not(PopListItem.IsExpanded)]"
							}

							blockoverride "onclick_showless" {
								visible = "[PopListItem.IsExpanded]"
							}
							
							icon = {
								size = { 45 45 }
								position = { -15 -1 }
								parentanchor = right|vcenter
								texture = "[PopListItem.GetPopType.GetTexture]"
							}
							
							widget = {
								size = { 100% 100% }
								datacontext = "[PopListItem]"

								block "tooltipwidget" {
								
									tooltipwidget = {
										FancyTooltip_PopType = {}
									}
								}
							}
						}		
						
						widget = {
							parentanchor = right
							size = { 440 50 }
							position = { -1 52 }

							# left info
							container = {
								position = { -1 -1 }
								parentanchor = left|vcenter
								
								### LARGEST INTEREST GROUPS
								block "largest_IGs" {
									flowcontainer = {
										datamodel = "[PopListItem.AccessTwoLargestIGs]"
										spacing = 5

										item = {
											ig_button = {}
										}
									}
								}
							}

							### SUPPORT AND RADICALS
							flowcontainer = {
								spacing = 2
								parentanchor = right|vcenter
								direction = vertical

								textbox = {
									parentanchor = right
									autoresize = yes
									align = right|nobaseline
									margin_right = 10
									max_width = 240
									elide = right
									fontsize_min = 14
									text = "POLITICAL_MOVEMENT_SUPPORT_WITH_LABEL_POP_LIST_ITEM"
								}

								flowcontainer = {
									parentanchor = right
									spacing = 2

									icon = {
										texture = "gfx/interface/icons/generic_icons/population_radical.dds"
										size = { 26 26 }
										parentanchor = vcenter
									}

									textbox = {
										autoresize = yes
										align = nobaseline|right
										parentanchor = vcenter
										margin_right = 10
										max_width = 240
										elide = right
										fontsize_min = 14

										text = "POP_SUPPORTERS_LIST_ITEM_RADICALS_TEXT"
										tooltip = "SUPPORTING_RADICALS_TOOLTIP_POP_LIST"
										alpha = "[TransparentIfZero_int64(PopListItem.GetNumRadicals)]"
									}
								}
							}
						}
					}
					
					### "N/M Pops shown" message
					textbox = {
						visible = "[And(PopListItem.IsExpanded, Not(PopListItem.IsAllPopsShown))]"
						parentanchor = left
						widgetanchor = left
						text = "POP_LIST_NOT_ALL_POPS_SHOWN"
						autoresize = yes
						align = left|nobaseline
						margin_left = 10
						margin_bottom = 5
					}

					### EXPANDED
					# We use fixedgridbox here rather than expanded_list for a better performance with long pop lists
					fixedgridbox = {
						parentanchor = hcenter
						addcolumn = @panel_width 
						addrow = 125

						minimumsize = { @panel_width -1 }
						maximumsize = { @panel_width -1 }
						using = expanded_list_bg
						visible = "[PopListItem.IsExpanded]"
						using = default_content_fade
						datamodel = "[PopListItem.GetPops]"
							
						item = {
							container = {
								parentanchor = hcenter
								name = "tutorial_highlight_pop"
								
								widget = {
									size = { @panel_width 125 }
									visible = "[Pop.IsValid]"
									
									background = {
										using = entry_bg_simple
									}
									
									### portrait + size
									button = {
										size = { 95 110 }
										position = { 5 0 }
										parentanchor = vcenter
										using = default_button
										onclick = "[InformationPanelBar.OpenPopDetailsPanel(Pop.AccessSelf)]"
										onmousehierarchyenter = "[AccessHighlightManager.HighlightState(Pop.GetState.Self)]"
										onmousehierarchyleave = "[AccessHighlightManager.RemoveHighlight]"

										tooltipwidget = {
											FancyTooltip_PopSupporters = {}
										}

										pop_portrait_simple = {
											position = { 0 0 }
											parentanchor = bottom|hcenter
											blockoverride "portrait_button" {
												alwaystransparent = yes
											}
										}
										textbox = {
											position = { 0 4 }

											block "pop_size_info" {
												text = "[Pop.GetPoliticalMovementSupporterCount(PoliticalMovement.Self)|Dv]"
											}

											size = { 100% 25 }
											align = center|nobaseline
											using = fontsize_large
											parentanchor = top|hcenter
											
											background = {
												using = dark_area
												margin = { -5 0 }
											}
										}
									}

									### left side
									flowcontainer = {
										position = { 110 0 }
										direction = vertical
										parentanchor = left|vcenter
										
										#total size info (for workforce panel)
										block "total_info" {}
										
										flowcontainer = {
											datacontext = "[Pop.GetCountry]"
											flowcontainer = {
												direction = vertical
												
												#culture
												button = {
													size = { 200 27 }
													using = clean_button
													onclick = "[InformationPanelBar.OpenCultureInfoPanel(Pop.AccessCulture)]"
															
													textbox = {
														size = { 100% 100% }
														text = "[Pop.GetCulture.GetName]"
														elide = right
														align = left|nobaseline
														margin = { 10 0 }
														tooltip = "POP_CULTURE_ACCEPTANCE"
													}
												}
												
												#religion
												button = {
													size = { 200 27 }
													using = clean_button
													onclick = "[InformationPanelBar.OpenReligionInfoPanel(Pop.AccessReligion)]"
													
													icon = {
														size = { 25 25 }
														datacontext = "[Pop.GetReligion]"
														texture = "[Religion.GetTexture]"
														parentanchor = right|vcenter
														position = { -3 0 }
													}
															
													textbox = {
														size = { 100% 100% }
														text = "[Pop.GetReligion.GetName]"
														elide = right
														align = left|nobaseline
														margin = { 10 0 }
														margin_right = 30
														tooltip = "POP_RELIGION_ACCEPTANCE"
													}
												}
											}
											
											#acceptance icon
											widget = {
												parentanchor = vcenter
												size = { 40 40 }
												
												icon = {
													tooltip = "DISCRIMINATION_TOOLTIP"
													visible = "[Pop.IsDiscriminated]"
													texture = "gfx/interface/icons/generic_icons/discriminated_icon.dds"
													size = { 100% 100% }
												}
											
												icon = {
													tooltip = "ACCEPTED_TOOLTIP"
													visible = "[Not(Pop.IsDiscriminated)]"
													texture = "gfx/interface/icons/generic_icons/accepted_icon.dds"
													size = { 100% 100% }
												}
											}
										}
										
										block "building_and_state" {
											button = {
												size = { 200 27 }
												using = clean_button
												onclick = "[InformationPanelBar.OpenStatePanel(Pop.AccessState)]"
														
												textbox = {
													size = { 85% 100% }
													text = "[Pop.GetState.GetName]"
													elide = right
													align = left|nobaseline
													margin = { 10 0 }
												}

												tiny_flag_no_interact = {
													datacontext = "[Pop.GetState.GetCountry]"
													parentanchor = right|vcenter
													position = { -5 0 }
												}

												tooltipwidget = {
													FancyTooltip_State = {
														datacontext = "[Pop.GetState]"
													}
												}
											}
												
											button = {
												visible = "[Pop.IsEmployed]"
												size = { 200 27 }
												using = clean_button
												onclick = "[InformationPanelBar.OpenBuildingDetailsPanel(Pop.AccessBuilding)]"

												tooltipwidget = {
													FancyTooltip_Building = {
														datacontext = "[Pop.GetBuilding]"
													}
												}
												
												textbox = {
													margin_right = 35
													margin_left = 10
													text = "[Pop.GetBuilding.GetName]"
													size = { 100% 100% }
													align = nobaseline
													elide = right
													parentanchor = vcenter
												}
												icon = {
													position = { -5 0 }
													size = { 22 22 }
													texture = "[Pop.GetBuilding.GetTexture]"
													parentanchor = right|vcenter
												}
											}
											
											textbox = {
												size = { 200 27 }
												text = "UNEMPLOYED"
												align = left|nobaseline
												visible = "[Not(Pop.IsEmployed)]"
												margin = { 10 0 }
												alpha = 0.5
												elide = right
											}
										}
									}
									
									### right side
									flowcontainer = {
										direction = vertical
										parentanchor = right|vcenter
										spacing = 2

										textbox = {
											autoresize = yes
											align = nobaseline|right
											parentanchor = right
											margin_right = 10
											max_width = 240
											elide = right
											fontsize_min = 14

											text = "POLITICAL_MOVEMENT_SUPPORT_WITH_LABEL_POP"
											tooltip = "POLITICAL_MOVEMENT_SUPPORT_TOOLTIP_POP"
										}

										###IG
										flowcontainer = {
											parentanchor = right
											margin_right = 10
											spacing = 5

											datacontext = "[Pop.GetPoliticalMovementSupportersLargestInterestGroup(PoliticalMovement.Self)]"

											textbox = {
												tooltip = POP_IG_ATTRACTION_HEADER_NO_CLICK
												visible = "[InterestGroup.IsValid]"
												text = "[InterestGroup.GetNameNoIcon]"
												size = { 145 20 }
												elide = right
												align = right|nobaseline
												parentanchor = vcenter
											}
											textbox = {
												visible = "[Not(InterestGroup.IsValid)]"
												text = "POLITICALLY_UNALIGNED"
												tooltip = POP_IG_INACTIVE_HEADER
												size = { 145 20 }
												elide = right
												align = right|nobaseline
												parentanchor = vcenter
											}
											
											ig_button = {
												size = { 25 25 }
												blockoverride "powerful_visibility" {
													visible = "[InterestGroup.IsPowerful]"
												}
												blockoverride "onclick" {
													onclick = "[InformationPanelBar.OpenInterestGroupPanel(InterestGroup.Self)]"
												}
												blockoverride "tooltip" {
													tooltip = POP_IG_ATTRACTION_HEADER
												}
											}	
										}

										textbox = {
											autoresize = yes
											align = nobaseline|right
											parentanchor = right
											margin_right = 10
											max_width = 240
											elide = right
											fontsize_min = 14

											text = "POP_SUPPORTERS_RADICALS_TEXT"
											tooltip = "SUPPORTING_RADICALS_TOOLTIP_POP"
											alpha = "[TransparentIfZero_int64(Pop.GetPoliticalMovementSupportersRadicals(PoliticalMovement.Self))]"
										}

										textbox = {
											autoresize = yes
											align = nobaseline|right
											parentanchor = right
											margin_right = 10
											max_width = 240
											elide = right
											fontsize_min = 14

											text = "POP_SUPPORTERS_LITERACY_TEXT"
											tooltip = "POP_POPULATION_LITERACY"
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}
}
